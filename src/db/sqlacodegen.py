# DO NOT EDIT THIS FILE
# It was generated by sqlacodegen
# https://github.com/agronholm/sqlacodegen

from typing import List, Optional, Set
import uuid
import datetime

from sqlalchemy import BigInteger, Boolean, CheckConstraint, Column, DateTime, Double, Enum, ForeignKeyConstraint, Index, Integer, Numeric, PrimaryKeyConstraint, String, Table, Text, UniqueConstraint, inspect as sql_inspect, text
from sqlalchemy.dialects.postgresql import JSONB, OID
from sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column, relationship
import decimal

import serializable


class Base(DeclarativeBase):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.serialize_types = (
            (bytes, serializable.Bytes()),
            (uuid.UUID, serializable.UUID()),
            (
                datetime.time,  # Should be checked before datetime
                serializable.Time(str_format="%H:%M"),
            ),
            (
                datetime.datetime,
                serializable.DateTime(
                    str_format="%Y-%m-%d %H:%M:%S", tzinfo=None
                ),
            ),
            (datetime.date, serializable.Date(str_format="%Y-%m-%d")),
            (decimal.Decimal, serializable.Decimal(str_format="{}")),
            (dict, self.to_dict),
            (Enum, serializable.Enum()),
        )

    def _get_sql_field_names(self) -> Set[str]:
        """
        :return:  set of sql fields names
        :raise:  sqlalchemy.exc.NoInspectionAvailable
        """
        inspector = sql_inspect(self)
        return {a.key for a in inspector.mapper.attrs}

    def _to_dict(self, value):
        keys = self._get_sql_field_names()
        result = {}
        for key in keys:
            value = getattr(self, key)
            for t, serializer in self.serialize_types:
                if isinstance(value, t):
                    result[key] = serializer(value)  # type: ignore
                else:
                    result[key] = value
        return result

    def to_dict(self):
        return self._to_dict(self)


class Job(Base):
    __tablename__ = 'job'
    __table_args__ = (
        CheckConstraint(
            'difficulty >= 0::numeric AND difficulty <= 1::numeric', name='job_difficulty_check'),
        PrimaryKeyConstraint('id', name='job_pkey'),
        UniqueConstraint('workflow_id', name='job_workflow_id_key'),
        Index('idx_job_created_at', 'created_at'),
        Index('idx_job_status', 'status')
    )

    id: Mapped[int] = mapped_column(BigInteger, primary_key=True)
    status: Mapped[str] = mapped_column(Enum(
        'pending', 'success', 'failure', name='job_status'), server_default=text("'pending'::job_status"))
    workflow_id: Mapped[Optional[str]] = mapped_column(String(255))
    thumbnail_url: Mapped[Optional[str]] = mapped_column(Text)
    source_url: Mapped[Optional[str]] = mapped_column(Text)
    audio_url: Mapped[Optional[str]] = mapped_column(Text)
    from_language: Mapped[Optional[str]] = mapped_column(String(10))
    to_language: Mapped[Optional[str]] = mapped_column(String(10))
    difficulty: Mapped[Optional[decimal.Decimal]
                       ] = mapped_column(Numeric(3, 2))
    metadata_: Mapped[Optional[dict]] = mapped_column('metadata', JSONB)
    created_at: Mapped[Optional[datetime.datetime]] = mapped_column(
        DateTime(True), server_default=text('now()'))
    updated_at: Mapped[Optional[datetime.datetime]] = mapped_column(
        DateTime(True), server_default=text('now()'))

    atom: Mapped[List['Atom']] = relationship(
        'Atom', back_populates='workflow')
    block: Mapped[List['Block']] = relationship(
        'Block', back_populates='workflow')
    card: Mapped[List['Card']] = relationship(
        'Card', back_populates='workflow')


t_pg_stat_statements = Table(
    'pg_stat_statements', Base.metadata,
    Column('userid', OID),
    Column('dbid', OID),
    Column('toplevel', Boolean),
    Column('queryid', BigInteger),
    Column('query', Text),
    Column('plans', BigInteger),
    Column('total_plan_time', Double(53)),
    Column('min_plan_time', Double(53)),
    Column('max_plan_time', Double(53)),
    Column('mean_plan_time', Double(53)),
    Column('stddev_plan_time', Double(53)),
    Column('calls', BigInteger),
    Column('total_exec_time', Double(53)),
    Column('min_exec_time', Double(53)),
    Column('max_exec_time', Double(53)),
    Column('mean_exec_time', Double(53)),
    Column('stddev_exec_time', Double(53)),
    Column('rows', BigInteger),
    Column('shared_blks_hit', BigInteger),
    Column('shared_blks_read', BigInteger),
    Column('shared_blks_dirtied', BigInteger),
    Column('shared_blks_written', BigInteger),
    Column('local_blks_hit', BigInteger),
    Column('local_blks_read', BigInteger),
    Column('local_blks_dirtied', BigInteger),
    Column('local_blks_written', BigInteger),
    Column('temp_blks_read', BigInteger),
    Column('temp_blks_written', BigInteger),
    Column('shared_blk_read_time', Double(53)),
    Column('shared_blk_write_time', Double(53)),
    Column('local_blk_read_time', Double(53)),
    Column('local_blk_write_time', Double(53)),
    Column('temp_blk_read_time', Double(53)),
    Column('temp_blk_write_time', Double(53)),
    Column('wal_records', BigInteger),
    Column('wal_fpi', BigInteger),
    Column('wal_bytes', Numeric),
    Column('jit_functions', BigInteger),
    Column('jit_generation_time', Double(53)),
    Column('jit_inlining_count', BigInteger),
    Column('jit_inlining_time', Double(53)),
    Column('jit_optimization_count', BigInteger),
    Column('jit_optimization_time', Double(53)),
    Column('jit_emission_count', BigInteger),
    Column('jit_emission_time', Double(53)),
    Column('jit_deform_count', BigInteger),
    Column('jit_deform_time', Double(53)),
    Column('stats_since', DateTime(True)),
    Column('minmax_stats_since', DateTime(True))
)


t_pg_stat_statements_info = Table(
    'pg_stat_statements_info', Base.metadata,
    Column('dealloc', BigInteger),
    Column('stats_reset', DateTime(True))
)


class Atom(Base):
    __tablename__ = 'atom'
    __table_args__ = (
        CheckConstraint(
            'frequency >= 0::numeric AND frequency <= 1::numeric', name='atom_frequency_check'),
        ForeignKeyConstraint(['workflow_id'], ['job.workflow_id'],
                             ondelete='CASCADE', name='atom_workflow_id_fkey'),
        PrimaryKeyConstraint('id', name='atom_pkey'),
        Index('idx_atom_value', 'value'),
        Index('idx_atom_workflow_id', 'workflow_id')
    )

    id: Mapped[int] = mapped_column(BigInteger, primary_key=True)
    workflow_id: Mapped[str] = mapped_column(String(255))
    value: Mapped[str] = mapped_column(Text)
    translated_value: Mapped[str] = mapped_column(Text)
    base_form: Mapped[str] = mapped_column(Text)
    part_of_speech: Mapped[Optional[str]] = mapped_column(String(50))
    frequency: Mapped[Optional[decimal.Decimal]] = mapped_column(Numeric(3, 2))
    created_at: Mapped[Optional[datetime.datetime]] = mapped_column(
        DateTime(True), server_default=text('now()'))

    workflow: Mapped['Job'] = relationship('Job', back_populates='atom')
    block_atom: Mapped[List['BlockAtom']] = relationship(
        'BlockAtom', back_populates='atom')
    card: Mapped[Optional['Card']] = relationship(
        'Card', uselist=False, back_populates='atom')


class Block(Base):
    __tablename__ = 'block'
    __table_args__ = (
        ForeignKeyConstraint(['workflow_id'], ['job.workflow_id'],
                             ondelete='CASCADE', name='block_workflow_id_fkey'),
        PrimaryKeyConstraint('id', name='block_pkey'),
        Index('idx_block_workflow_id', 'workflow_id')
    )

    id: Mapped[int] = mapped_column(BigInteger, primary_key=True)
    workflow_id: Mapped[str] = mapped_column(String(255))
    value: Mapped[str] = mapped_column(Text)
    translated_value: Mapped[str] = mapped_column(Text)
    start_time: Mapped[Optional[decimal.Decimal]
                       ] = mapped_column(Numeric(10, 3))
    end_time: Mapped[Optional[decimal.Decimal]] = mapped_column(Numeric(10, 3))
    created_at: Mapped[Optional[datetime.datetime]] = mapped_column(
        DateTime(True), server_default=text('now()'))

    workflow: Mapped['Job'] = relationship('Job', back_populates='block')
    block_atom: Mapped[List['BlockAtom']] = relationship(
        'BlockAtom', back_populates='block')
    card: Mapped[Optional['Card']] = relationship(
        'Card', uselist=False, back_populates='block')


class BlockAtom(Base):
    __tablename__ = 'block_atom'
    __table_args__ = (
        ForeignKeyConstraint(['atom_id'], ['atom.id'],
                             ondelete='CASCADE', name='block_atom_atom_id_fkey'),
        ForeignKeyConstraint(['block_id'], ['block.id'],
                             ondelete='CASCADE', name='block_atom_block_id_fkey'),
        PrimaryKeyConstraint('id', name='block_atom_pkey'),
        UniqueConstraint('block_id', 'atom_id', 'position',
                         name='block_atom_block_id_atom_id_position_key'),
        Index('idx_block_atom_atom_id', 'atom_id'),
        Index('idx_block_atom_block_id', 'block_id')
    )

    id: Mapped[int] = mapped_column(BigInteger, primary_key=True)
    block_id: Mapped[int] = mapped_column(BigInteger)
    atom_id: Mapped[int] = mapped_column(BigInteger)
    position: Mapped[Optional[int]] = mapped_column(Integer)

    atom: Mapped['Atom'] = relationship('Atom', back_populates='block_atom')
    block: Mapped['Block'] = relationship('Block', back_populates='block_atom')


class Card(Base):
    __tablename__ = 'card'
    __table_args__ = (
        CheckConstraint("type::text = 'atom'::text AND atom_id IS NOT NULL AND block_id IS NULL OR type::text = 'block'::text AND block_id IS NOT NULL AND atom_id IS NULL", name='card_reference_check'),
        CheckConstraint(
            "type::text = ANY (ARRAY['atom'::character varying, 'block'::character varying]::text[])", name='card_type_check'),
        ForeignKeyConstraint(['atom_id'], ['atom.id'],
                             ondelete='CASCADE', name='card_atom_id_fkey'),
        ForeignKeyConstraint(['block_id'], ['block.id'],
                             ondelete='CASCADE', name='card_block_id_fkey'),
        ForeignKeyConstraint(['workflow_id'], ['job.workflow_id'],
                             ondelete='CASCADE', name='card_workflow_id_fkey'),
        PrimaryKeyConstraint('id', name='card_pkey'),
        UniqueConstraint('atom_id', name='card_atom_id_unique'),
        UniqueConstraint('block_id', name='card_block_id_unique'),
        Index('card_atom_id_unique_idx', 'atom_id', unique=True),
        Index('card_block_id_unique_idx', 'block_id', unique=True),
        Index('idx_card_atom_id', 'atom_id'),
        Index('idx_card_block_id', 'block_id'),
        Index('idx_card_destination_id', 'destination_id'),
        Index('idx_card_type', 'type'),
        Index('idx_card_workflow_id', 'workflow_id')
    )

    id: Mapped[int] = mapped_column(BigInteger, primary_key=True)
    workflow_id: Mapped[str] = mapped_column(String(255))
    type: Mapped[str] = mapped_column(String(10))
    destination: Mapped[str] = mapped_column(
        Enum('mochi', name='card_destination'))
    atom_id: Mapped[Optional[int]] = mapped_column(BigInteger)
    block_id: Mapped[Optional[int]] = mapped_column(BigInteger)
    destination_id: Mapped[Optional[str]] = mapped_column(String(255))
    card_data: Mapped[Optional[dict]] = mapped_column(JSONB)
    status: Mapped[Optional[str]] = mapped_column(
        String(50), server_default=text("'created'::character varying"))
    created_at: Mapped[Optional[datetime.datetime]] = mapped_column(
        DateTime(True), server_default=text('now()'))
    updated_at: Mapped[Optional[datetime.datetime]] = mapped_column(
        DateTime(True), server_default=text('now()'))

    atom: Mapped[Optional['Atom']] = relationship(
        'Atom', back_populates='card')
    block: Mapped[Optional['Block']] = relationship(
        'Block', back_populates='card')
