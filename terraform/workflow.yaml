main:
  params: [input]
  steps:
    - init:
        assign:
          - video_url: $${input.video_url}
          - email: $${input.email}
          - job_id: $${sys.get_env("GOOGLE_CLOUD_WORKFLOW_EXECUTION_ID")}
          - start_time: $${sys.now()}

    - create_job:
        try:
          call: http.post
          args:
            url: ${job_manager_url}
            body:
              action: 'create'
              job_id: $${job_id}
              video_url: $${video_url}
          result: job_result
        retry:
          max_retries: 3
          backoff:
            initial_delay: 1
            max_delay: 60
            multiplier: 2

    - extract_audio:
        try:
          call: http.post
          args:
            url: ${youtube_processor_url}
            body:
              video_url: $${video_url}
              job_id: $${job_id}
          result: audio_result
        retry:
          max_retries: 3
          backoff:
            initial_delay: 1
            max_delay: 60
            multiplier: 2

    - transcribe_and_translate:
        try:
          call: http.post
          args:
            url: ${transcription_translation_cards_processor_url}
            body:
              name: $${audio_result.body.name}
              audio_path: $${audio_result.body.audio_path}
              job_id: $${job_id}
          result: transcription_result
        retry:
          max_retries: 3
          backoff:
            initial_delay: 1
            max_delay: 60
            multiplier: 2

    - notify:
        try:
          call: http.post
          args:
            url: ${notification_processor_url}
            body:
              email: $${email}
              job_id: $${job_id}
              stats:
                atom_cards_created_count: $${transcription_result.body.atom_cards_created_count}
                block_cards_created_count: $${transcription_result.body.block_cards_created_count}
                processing_time: $${sys.now() - start_time}
          result: notification_result
        retry:
          max_retries: 3
          backoff:
            initial_delay: 1
            max_delay: 60
            multiplier: 2

    - end_job:
        try:
          call: http.post
          args:
            url: ${job_manager_url}
            body:
              action: 'update'
              job_id: $${job_id}
              status: 'success'
          result: job_result
        retry:
          max_retries: 3
          backoff:
            initial_delay: 1
            max_delay: 60
            multiplier: 2

    - return_result:
        return:
          job_id: $${job_id}
          status: 'completed'
          stats:
            atom_cards_created: $${transcription_result.body.atom_cards_created_count}
            block_cards_created: $${transcription_result.body.block_cards_created_count}
            processing_time: $${sys.now() - start_time}
  except:
    as: error
    steps:
      - handle_workflow_failure:
          call: handle_step_failure
          args:
            job_id: $${job_id}
            error: $${error}

handle_step_failure:
  params: [job_id, error]
  steps:
    - update_job_status:
        call: http.post
        args:
          url: ${job_manager_url}
          body:
            action: 'update'
            job_id: $${job_id}
            status: 'failure'
            error: $${error.message}
    - raise_error:
        raise: $${error}
